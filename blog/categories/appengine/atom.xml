<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AppEngine | Akshay's Programming Blog]]></title>
  <link href="http://akshayrangnekar.github.io/blog/categories/appengine/atom.xml" rel="self"/>
  <link href="http://akshayrangnekar.github.io/"/>
  <updated>2014-03-16T20:07:13+00:00</updated>
  <id>http://akshayrangnekar.github.io/</id>
  <author>
    <name><![CDATA[Akshay Rangnekar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Up and Running on AppEngine With Maven, Jersey and Guice - Part 2]]></title>
    <link href="http://akshayrangnekar.github.io/blog/2014/03/14/up-and-running-on-appengine-with-maven-jersey-and-guice-part-2/"/>
    <updated>2014-03-14T10:52:12+00:00</updated>
    <id>http://akshayrangnekar.github.io/blog/2014/03/14/up-and-running-on-appengine-with-maven-jersey-and-guice-part-2</id>
    <content type="html"><![CDATA[<p>This is part two of my post on getting a web application up and running on Google AppEngine with Maven, Jersey and Guice.</p>

<p>Part 2 gets us to the point of having a working web application running locally and deployed on AppEngine. If you haven&rsquo;t got maven or your working directory set up yet, start on <a href="/blog/2014/03/13/up-and-running-on-appengine-with-maven-jersey-and-guice/">Part 1</a>.</p>

<!-- more -->


<h2>Don&rsquo;t follow the Google docs</h2>

<p>This is one not to follow along, but helps explain why this tutorial is needed. To begin, I decided to try following the <a href="">AppEngine docs on user maven</a>.</p>

<p>Let&rsquo;s try their command:
```
mbp:listerly$ mvn archetype:generate \</p>

<blockquote><p> -DarchetypeGroupId=com.google.appengine.archetypes \
 -DarchetypeArtifactId=appengine-skeleton-archetype \
 -DarchetypeVersion=1.9.0 \
 -DgroupId=com.listerly.server \
 -DartifactId=server \
 -Dversion=0.1 \
 -Dpackage=com.listerly
```</p></blockquote>

<p>I saw lots of nice maven messages about downloading everything under the sun, and then a hostile failure message.
<code>
[INFO] Archetype repository missing. Using the one from [com.google.appengine.archetypes:appengine-skeleton-archetype:1.8.7] found in catalog remote
Downloading: http://repo.maven.apache.org/maven2/com/google/appengine/archetypes/appengine-skeleton-archetype/1.9.0/appengine-skeleton-archetype-1.9.0.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13.591 s
[INFO] Finished at: 2014-03-14T11:39:14+00:00
[INFO] Final Memory: 13M/246M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:2.2:generate (default-cli) on project standalone-pom: The desired archetype does not exist (com.google.appengine.archetypes:appengine-skeleton-archetype:1.9.0) -&gt; [Help 1]
</code></p>

<p>Thanks very much for that. That doc was updated (when I loaded it) on March 7 2014, so it&rsquo;s 7 days old. And doesn&rsquo;t work. Too new to be out of date, too old to have teething problems.</p>

<p>A <a href="http://search.maven.org/#search%7Cga%7C1%7Cappengine">quick search of Maven Central</a> reveals the likely issue &ndash; the latest version of this archetype that&rsquo;s been published is 1.8.7. Looks like someone&rsquo;s been forgetting to push the archetypes to the Maven Central repo for versions 1.8.8, 1.8.9 and 1.9.0. Two options to proceed: either start using the previous archetype and update. Or start from a cleaner archetype and add in the AppEngine functionality. I&rsquo;m going to proceed with both options: you can pick and choose the one you prefer.</p>

<h2>Starting from the AppEngine skeleton archetype</h2>

<p>Lets first create a branch to work from:
```
mbp:listerly$ git checkout -b feature_gaeSkeletonArchetype
Switched to a new branch &lsquo;feature_gaeSkeletonArchetype&rsquo;
mbp:listerly$ cat README.md</p>

<h1>listerly</h1>

<p>mbp:listerly$ echo &ldquo;Branch for appengine skeleton archetype&rdquo; > branch.txt
mbp:listerly$ git add .
mbp:listerly$ git commit -m &ldquo;Branch message added.&rdquo;
[feature_gaeSkeletonArchetype 1ca1c52] Branch message added.
 1 file changed, 1 insertion(+)
 create mode 100644 branch.txt
mbp:listerly$ git push -u origin feature_gaeSkeletonArchetype
Counting objects: 4, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 325 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To <a href="https://github.com/akshayrangnekar/listerly.git">https://github.com/akshayrangnekar/listerly.git</a>
 * [new branch]      feature_gaeSkeletonArchetype &ndash;> feature_gaeSkeletonArchetype
Branch feature_gaeSkeletonArchetype set up to track remote branch feature_gaeSkeletonArchetype from origin.
```</p>

<p>Now we try re-running the maven archetype:
<code>
mbp:listerly$ mvn archetype:generate  -DarchetypeGroupId=com.google.appengine.archetypes  -DarchetypeArtifactId=appengine-skeleton-archetype  -DarchetypeVersion=1.8.7  -DgroupId=com.listerly.server  -DartifactId=server  -Dversion=0.1  -Dpackage=com.listerly
[INFO] Scanning for projects...
[INFO]
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[LINES REMOVED]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.159 s
[INFO] Finished at: 2014-03-14T13:14:45+00:00
[INFO] Final Memory: 14M/246M
[INFO] ------------------------------------------------------------------------
</code></p>

<p>That&rsquo;s a lot better. Lets see what we have created for us. Using a handy little command I found <a href="https://coderwall.com/p/owb6eg">here</a>, modified to get rid of gitcrud to make this viewable
<code>
mbp:listerly$ find . -print | grep -v '.git' | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
.
|____branch.txt
|____README.md
|____server
| |____pom.xml
| |____README.md
| |____server-ear
| | |____pom.xml
| | |____src
| | | |____main
| | | | |____application
| | | | | |____META-INF
| | | | | | |____appengine-application.xml
| | | | | | |____application.xml
| | | | | | |____MANIFEST.MF
| |____server-war
| | |____pom.xml
| | |____src
| | | |____main
| | | | |____java
| | | | |____webapp
| | | | | |____WEB-INF
| | | | | | |____appengine-web.xml
| | | | | | |____logging.properties
| | | | | | |____web.xml
| | | |____test
| | | | |____java
</code></p>

<p>Ok &ndash; let&rsquo;s try running this:
<code>
mbp:listerly$ cd server
mbp:server$ mvn appengine:devserver
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] server
[INFO] server-war
[INFO] server-ear
[REMOVED LINES]
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] server ............................................ FAILURE [ 16.241 s]
[INFO] server-war ........................................ SKIPPED
[INFO] server-ear ........................................ SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17.469 s
[INFO] Finished at: 2014-03-14T13:26:54+00:00
[INFO] Final Memory: 9M/246M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal com.google.appengine:appengine-maven-plugin:1.8.7:devserver (default-cli) on project server: The application directory does not exist : /Users/akshay/Dev/Listerly/listerly/server/target/server-0.1 -&gt; [Help 1]
</code>
Not nice. Ok, let&rsquo;s try again with some help from the appengine docs (though not following them to the letter since they are wrong about the directory to run from):
<code>
mbp:server akshay$ mvn clean install
[REMOVED LOTS OF LINES]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17.990 s
[INFO] Finished at: 2014-03-14T13:36:48+00:00
[INFO] Final Memory: 11M/246M
[INFO] ------------------------------------------------------------------------
mbp:server akshay$ mvn -pl server-ear appengine:devserver
[INFO] Scanning for projects...
[REMOVED LOTS OF LINES]
[INFO] INFO: The admin console is running at http://localhost:8080/_ah/admin
[INFO] Mar 14, 2014 1:40:02 PM com.google.appengine.tools.development.DevAppServerImpl doStart
[INFO] INFO: Dev App Server is now running
</code>
That looks good.</p>

<p>If we load up the admin console at <code>http://localhost:8080/_ah/admin</code> it seems right:
<img src="/images/postimages/2/dev-appengine-console1.png"></p>

<p>There is of course nothing there. So let&rsquo;s create a very simple Servlet. Here&rsquo;s my incredibly basic HelloWorldServlet:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (HelloWorldServlet.java)</span> <a href='/downloads/code/1/HelloWorldServlet.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">listerly</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&quot;/Hello&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span><span class='line'>		<span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;text/plain&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello AppEngine!&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But if we try running it:
<code>console
mbp:server akshay$ mvn install
[INFO] Scanning for projects...
...
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR :
[INFO] -------------------------------------------------------------
[ERROR] /Users/akshay/Dev/Listerly/listerly/server/server-war/src/main/java/com/listerly/HelloWorldServlet.java:[6,31] error: package javax.servlet.annotation does not exist
[ERROR] /Users/akshay/Dev/Listerly/listerly/server/server-war/src/main/java/com/listerly/HelloWorldServlet.java:[11,1] error: cannot find symbol
[ERROR]   symbol: class WebServlet
/Users/akshay/Dev/Listerly/listerly/server/server-war/src/main/java/com/listerly/HelloWorldServlet.java:[6,31] error: package javax.servlet.annotation does not exist
[ERROR] /Users/akshay/Dev/Listerly/listerly/server/server-war/src/main/java/com/listerly/HelloWorldServlet.java:[11,1] error: cannot find symbol
[INFO] 4 errors
</code></p>

<p>Ass. So clearly the archetype doesn&rsquo;t use the latest version of the Servlet API. Interestingly, I cannot find anything easily available in Google&rsquo;s docs about what version of the Servlet API they support. Let&rsquo;s try defining the servlet in the web.xml
``` xml</p>

<pre><code>&lt;servlet&gt;
    &lt;servlet-name&gt;HelloWorldServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.listerly.HelloWorldServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;HelloWorldServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/hi&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>```</p>

<p>and rerunning:
<code>
mbp:server akshay$ mvn install
mbp:server akshay$ mvn -pl server-ear appengine:devserver
</code></p>

<p>and this time we get something better:
<img src="/images/postimages/2/dev-appengine-try2.png"></p>

<p>Awesome. We now have a servlet running on our local dev server. Looks like we can&rsquo;t use the WebServlet annotation with the devserver though. Lets try pushing this app to appengine. First, there are a tweak to the configuration file. In <code>appengine-web.xml</code> set the application to the id of the project you created on the AppEngine console:</p>

<p>``` xml server-war/src/main/webapp/WEB-INF/appengine-web.xml
&lt;appengine-web-app xmlns=&ldquo;<a href="http://appengine.google.com/ns/1.0">http://appengine.google.com/ns/1.0</a>&rdquo;></p>

<pre><code>&lt;application&gt;listerly-dev&lt;/application&gt;
&lt;version&gt;${appengine.app.version}&lt;/version&gt;
&lt;threadsafe&gt;true&lt;/threadsafe&gt;

&lt;system-properties&gt;
    &lt;property name="java.util.logging.config.file" value="WEB-INF/logging.properties"/&gt;
&lt;/system-properties&gt;
</code></pre>

<p>&lt;/appengine-web-app>
```</p>

<p>and in the <code>appengine-application.xml</code> do the same thing:
<code>xml server-ear/src/main/application/META-INF/appengine-application.xml
&lt;appengine-application xmlns="http://appengine.google.com/ns/1.0"&gt;
  &lt;application&gt;listerly-dev&lt;/application&gt;
&lt;/appengine-application&gt;
</code></p>

<p>And then run the <code>update</code> tasks <code>mvn -pl server-ear appengine:update</code>. If all is well, you should first see a browser window pop up asking you for authentication:
<img src="/images/postimages/2/dev-appengine-auth1.png"></p>

<p><img src="/images/postimages/2/dev-appengine-auth2.png"></p>

<p>Enter that code when you get the prompt <code>Please enter code:</code>. If all is well you should see a <code>BUILD SUCCESS</code> message at the end of the compilation and deployment step (note: this takes a couple of minutes);</p>

<p>Load the page from your appspot URL <code>http://[your-application-id].appspot.com/hi</code> and you should see your Hello AppEngine page, running on Google AppEngine. That&rsquo;s success for this part.</p>

<p><img src="/images/postimages/2/helloworld-appengine1.png"></p>

<p>Lets commit everything and then switch back to the master to try the handrolled way.
<code>
mbp:~/Dev/Listerly/listerly$ git add .
[NON-ERROR OUTPUT HIDDEN]
mbp:~/Dev/Listerly/listerly$ git commit -m "Working HelloWorld with Google archetype"
[NON-ERROR OUTPUT HIDDEN]
mbp:~/Dev/Listerly/listerly$ git push
[NON-ERROR OUTPUT HIDDEN]
mbp:~/Dev/Listerly/listerly$ git checkout master
[NON-ERROR OUTPUT HIDDEN]
mbp:~/Dev/Listerly/listerly$ git pull
Already up-to-date.
mbp:~/Dev/Listerly/listerly$ ls
README.md   server
</code></p>

<h2>Starting from scratch</h2>

<p>I have to admit, this is my preferred way of starting because I like to have complete control over the project layout, the directory structure etc.</p>

<p>Let&rsquo;s start with what my ideal directory structure is:</p>

<ul>
<li>[root directory] &ndash; Primarily contains build files

<ul>
<li><em>src</em>

<ul>
<li><em>main</em>

<ul>
<li><em>java</em> &ndash; The main directory for source code</li>
<li><em>resources</em> &ndash; Other items that have to go into the jar (logging config, application config)</li>
<li><em>webapp</em> &ndash; Resources (css, images, js)</li>
<li><em>templates</em> &ndash; Freemarker templates for pages</li>
</ul>
</li>
<li><em>test</em> &ndash; Testing resources (will be defined later)</li>
</ul>
</li>
<li><em>build</em> &ndash; temporary directory, ignored by git, for artifacts</li>
</ul>
</li>
</ul>


<p>Lets start by creating that directory structure (leave out the build directory &ndash; should be created automatically). Then we&rsquo;ll make a basic Maven build file (named <code>pom.xml</code> in our root directory)</p>

<p>```
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion></p>

<p>  <groupId>com.listerly</groupId>
  <artifactId>listerly-server</artifactId>
  <version>0.1</version>
  <packaging>war</packaging></p>

<p>  <name>Listerly Main Server</name>
  <url><a href="http://www.listerly.com">http://www.listerly.com</a></url></p>

<p>  <dependencies></p>

<pre><code>  &lt;dependency&gt;
    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
    &lt;version&gt;2.5&lt;/version&gt;
  &lt;/dependency&gt;
</code></pre>

<p>  </dependencies>
</project>
```</p>

<p>Then we add our basic servlet and a web.xml:</p>

<p>In <code>src/main/java/com/listerly/</code>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (HelloWorldServlet.java)</span> <a href='/downloads/code/1/b/HelloWorldServlet.java'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">listerly</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;serial&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="nd">@Override</span>
</span><span class='line'>	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">resp</span><span class="o">)</span>
</span><span class='line'>			<span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">resp</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;text/plain&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">resp</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, my AppEngine&quot;</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In <code>src/main/webapp/WEB-INF</code>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (web.xml)</span> <a href='/downloads/code/1/b/web.xml'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;web-app</span> <span class="na">version=</span><span class="s">&quot;2.5&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee&quot;</span>
</span><span class='line'><span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'><span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;welcome-file-list&gt;</span>
</span><span class='line'>		<span class="nt">&lt;welcome-file&gt;</span>index.html<span class="nt">&lt;/welcome-file&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/welcome-file-list&gt;</span>
</span><span class='line'>	<span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>	    <span class="nt">&lt;servlet-name&gt;</span>HelloWorldServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>	    <span class="nt">&lt;servlet-class&gt;</span>com.listerly.HelloWorldServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'>	<span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>	    <span class="nt">&lt;servlet-name&gt;</span>HelloWorldServlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>	    <span class="nt">&lt;url-pattern&gt;</span>/hi<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/servlet-mapping&gt;</span>
</span><span class='line'><span class="nt">&lt;/web-app&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets try building our war file:
<code>console
mbp:~/Dev/Listerly/listerly$ mvn package
[BLAH BLAH BLAH...]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
</code></p>

<p>Good so far. But there&rsquo;s not much we can do with this just yet. Let&rsquo;s first start with trying to run our war on a web server independently of AppEngine.</p>

<p>Lets add the Jetty plugin to our <code>pom.xml</code>:
``` xml
  <build></p>

<pre><code>&lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;9.1.3.v20140225&lt;/version&gt;
    &lt;/plugin&gt;  
&lt;/plugins&gt;
</code></pre>

<p>  </build>
```</p>

<p>Now try running the <code>mvn jetty:run</code> task
<code>console
mbp:~/Dev/Listerly/listerly$ mvn package
[BLAH BLAH BLAH...]
mbp:~/Dev/Listerly/listerly$ mvn jetty:run
[BLAH BLAH BLAH...]
[INFO] Started Jetty Server
</code></p>

<p>If you try accessing your servlet at <code>localhost:8080/hi</code> you should see a positive result:
<img src="/images/postimages/2/helloworld-jetty.png"></p>

<p>Ok, lets move on to integrating appengine.</p>

<p>Before we start, I&rsquo;m going to change my servlet a tiny bit just to be able to differentiate and make sure this is the version we&rsquo;re seeing. Change the appropriate line to <code>resp.getWriter().println("Hello, handrolled AppEngine!");</code></p>

<p>Next, we need to create the <code>appengine-web.xml</code> (in <code>src/main/webapp/WEB-INF/</code>) that tells AppEngine what project and version<br/>
<code>xml
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;appengine-web-app xmlns="http://appengine.google.com/ns/1.0"&gt;
  &lt;application&gt;listerly-dev&lt;/application&gt;
  &lt;version&gt;1&lt;/version&gt;
  &lt;threadsafe&gt;true&lt;/threadsafe&gt;
&lt;/appengine-web-app&gt;
</code></p>

<p>Then we need to add a couple of items to our <code>pom.xml</code>
``` xml pom.xml &ndash; see lines 14-18 and 32-36
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion></p>

<p>  <groupId>com.listerly</groupId>
  <artifactId>listerly-server</artifactId>
  <version>0.1</version>
  <packaging>war</packaging></p>

<p>  <name>Listerly Main Server</name>
  <url><a href="http://www.listerly.com">http://www.listerly.com</a></url></p>

<p>  <dependencies></p>

<pre><code>  &lt;dependency&gt;
      &lt;groupId&gt;com.google.appengine&lt;/groupId&gt;
      &lt;artifactId&gt;appengine-api-1.0-sdk&lt;/artifactId&gt;
      &lt;version&gt;1.9.0&lt;/version&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
    &lt;version&gt;2.5&lt;/version&gt;
  &lt;/dependency&gt;
</code></pre>

<p>  </dependencies>
  <build></p>

<pre><code>&lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;
      &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;9.1.3.v20140225&lt;/version&gt;
    &lt;/plugin&gt;
    &lt;plugin&gt;
        &lt;groupId&gt;com.google.appengine&lt;/groupId&gt;
        &lt;artifactId&gt;appengine-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.8.7&lt;/version&gt;
    &lt;/plugin&gt;
&lt;/plugins&gt;
</code></pre>

<p>  </build><br/>
</project>
```</p>

<p>Now if we run <code>mvn appengine:devserver</code> and visit <code>http://localhost:8080/hi</code> we get something that looks good:</p>

<p><img src="/images/postimages/2/helloworld-appengine1.png"></p>

<p>Lets try pushing it to the Google servers. Run <code>mvn appengine:update</code> and if all goes well (it should!), open a browser to <code>http://[app-id].appspot.com/hi</code>. Uh oh. Doesn&rsquo;t say &ldquo;handrolled&rdquo; for me. Looks like it&rsquo;s still running the old version. Fortunately, this is to be expected because AppEngine allows you to upload multiple versions of your app, but only one of them is the &ldquo;default version&rdquo;. Lets make this version default. Visit <code>appengine.google.com</code>. Login, and then click on your application. In the left navigation bar you should see &ldquo;versions&rdquo;. Click there, and you&rsquo;ll see that you have two versions deployed: <code>1-war</code> that was created by the AppEngine archetype, and <code>1</code>, which is the version we just created. Select 1, and click make default. Now if you reload your other browser window, you should see &ldquo;Hello, handrolled AppEngine!&rdquo;. That&rsquo;s success for Part 2.</p>

<p>You can choose which approach you prefer. I like the ability to have full control over my project structure so for the rest of this tutorial I&rsquo;m going to go with the second approach (which the more attentive may have guessed by the fact that this has all been done on the master branch though I claim that was accidental). Add everything into git (if you&rsquo;re going with this approach &ndash; otherwise discard everything and merge the other branch into master) and we&rsquo;ll be ready to go with Part 3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and Running on AppEngine With Maven, Jersey and Guice - Part 1]]></title>
    <link href="http://akshayrangnekar.github.io/blog/2014/03/13/up-and-running-on-appengine-with-maven-jersey-and-guice/"/>
    <updated>2014-03-13T17:20:31+00:00</updated>
    <id>http://akshayrangnekar.github.io/blog/2014/03/13/up-and-running-on-appengine-with-maven-jersey-and-guice</id>
    <content type="html"><![CDATA[<p>After 10 years away from proper coding, I&rsquo;m building a new application. I&rsquo;ll talk more about Listerly and some of my design choices at a later time, but this post should help document the process so if anyone else wants this type of a setup it&rsquo;s easy to get going.</p>

<ul>
<li><a href="/blog/2014/03/13/up-and-running-on-appengine-with-maven-jersey-and-guice/">Part 1</a> gets you set up with maven and a blank repository on github</li>
<li><a href="/blog/2014/03/14/up-and-running-on-appengine-with-maven-jersey-and-guice-part-2/">Part 2</a> gets you to the point of having a working web application running locally and deployed on AppEngine.</li>
<li>Part 3 adds Jersey, Freemarker and Guice to the mix.</li>
</ul>


<!-- more -->


<h2>Create AppEngine Project</h2>

<p>Very simple. Go to <a href="http://appengine.google.com">appengine.google.com</a>. Login, then click &ldquo;Create Application&rdquo;:
<img src="/images/postimages/appengine1.png"></p>

<p>Find a nice identifier is available, and give your application a descriptive name. For the moment, I&rsquo;ve set with the default authentication options, that allows any Google user to authenticate to your app (for the areas that you enable authentication):
<img src="/images/postimages/appengine2.png"></p>

<p>Hopefully that should be all you need to do. Tell Google to go ahead and you should have a blank project ready to go:
<img src="/images/postimages/appengine3.png"></p>

<h2>Install Maven</h2>

<p>First, download Maven from the Apache download site:
```
mbp:~ akshay$ cd Dev/
mbp:Dev akshay$ mkdir lib
mbp:Dev akshay$ cd lib/
mbp:lib akshay$ curl -O <a href="http://apache.mirror.anlx.net/maven/maven-3/3.2.1/binaries/apache-maven-3.2.1-bin.tar.gz">http://apache.mirror.anlx.net/maven/maven-3/3.2.1/binaries/apache-maven-3.2.1-bin.tar.gz</a>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</p>

<pre><code>                             Dload  Upload   Total   Spent    Left  Speed
</code></pre>

<p>100 6765k  100 6765k    0     0  1757k      0  0:00:03  0:00:03 &mdash;:&mdash;:&mdash; 1756k
mbp:lib akshay$
```</p>

<p>Then unzip the file:
<code>
mbp:lib akshay$ ls
apache-maven-3.2.1-bin.tar.gz
mbp:lib akshay$ tar -xvzf apache-maven-3.2.1-bin.tar.gz
</code></p>

<p>Set some environment variables:
<code>bash
export M2_HOME=/Users/akshay/Dev/lib/apache-maven-3.2.1/
export M2=$M2_HOME/bin
export MAVEN_OPTS="-Xms256m -Xmx512m"
export PATH=$M2:$PATH
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
</code></p>

<p>Check that we&rsquo;re good:
<code>console
mbp:lib akshay$ mvn -version
Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T17:37:52+00:00)
Maven home: /Users/akshay/Dev/lib/apache-maven-3.2.1
Java version: 1.7.0_51, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "mac os x", version: "10.9.2", arch: "x86_64", family: "mac"
</code></p>

<h2>Create repository</h2>

<p>Go to GitHub and create a new private repository
<img src="/images/postimages/github-newrepo1.png"></p>

<p>Note I&rsquo;ve asked it to create a README for me so I can clone. Personal preference &ndash; I prefer to <code>clone</code> only rather than <code>init</code>.
<img src="/images/postimages/github-newrepo2.png"></p>

<p><img src="/images/postimages/github-newrepo3.png"></p>

<p>Then clone to your local development directory:
<code>
mbp:Dev akshay$ mkdir Listerly
mbp:Dev akshay$ cd Listerly/
mbp:Listerly akshay$ ls
mbp:Listerly akshay$ git clone https://github.com/akshayrangnekar/listerly.git
Cloning into 'listerly'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
Checking connectivity... done.
mbp:Listerly akshay$ cd listerly
mbp:listerly akshay$ ls
README.md
mbp:listerly akshay$
</code></p>

<p>That&rsquo;s it for Part 1. In <a href="/blog/2014/03/14/up-and-running-on-appengine-with-maven-jersey-and-guice-part-2/">Part 2</a> we&rsquo;ll create a Maven project for AppEngine and a simple dummy servlet.</p>

<p><a href="/blog/2014/03/14/up-and-running-on-appengine-with-maven-jersey-and-guice-part-2/">Continue &ndash;></a></p>
]]></content>
  </entry>
  
</feed>
